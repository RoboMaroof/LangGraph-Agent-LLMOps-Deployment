name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  POETRY_VIRTUALENVS_CREATE: false
  QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run Tests
        run: poetry run pytest

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Copy full project to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."  
          target: "~/langgraph-app"

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/langgraph-app

            echo "üîê Writing .env file..."
            cat <<EOF > .env
            QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            TAVILY_API_KEY=${{ secrets.TAVILY_API_KEY }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            QDRANT_COLLECTION=langgraph-rag-vectordb
            EOF

            echo "üßº Stopping containers on ports 8000 (backend) and 8501 (frontend)..."

            # Stop and remove any containers using port 8000
            docker ps -q --filter "publish=8000" | xargs -r docker stop
            docker ps -a -q --filter "publish=8000" | xargs -r docker rm

            # Stop and remove any containers using port 8501
            docker ps -q --filter "publish=8501" | xargs -r docker stop
            docker ps -a -q --filter "publish=8501" | xargs -r docker rm

            echo "üßπ Bringing down previous compose setup (if any)..."
            docker-compose down

            echo "üê≥ Rebuilding and starting containers..."
            docker-compose up -d --build

            echo "‚úÖ Deployment complete!"
